/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QTEXTBLOCK
REQUEST QTEXTBLOCKFORMAT
REQUEST QTEXTCHARFORMAT
REQUEST QTEXTDOCUMENT
REQUEST QTEXTDOCUMENTFRAGMENT
REQUEST QTEXTFRAME
REQUEST QTEXTLIST
REQUEST QTEXTTABLE
#endif

CLASS QTextCursor

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete
   METHOD swap
   METHOD isNull
   METHOD setPosition
   METHOD position
   METHOD positionInBlock
   METHOD anchor
   METHOD insertText
   METHOD movePosition
   METHOD visualNavigation
   METHOD setVisualNavigation
   METHOD setVerticalMovementX
   METHOD verticalMovementX
   METHOD setKeepPositionOnInsert
   METHOD keepPositionOnInsert
   METHOD deleteChar
   METHOD deletePreviousChar
   METHOD select
   METHOD hasSelection
   METHOD hasComplexSelection
   METHOD removeSelectedText
   METHOD clearSelection
   METHOD selectionStart
   METHOD selectionEnd
   METHOD selectedText
   METHOD selection
   METHOD selectedTableCells
   METHOD block
   METHOD charFormat
   METHOD setCharFormat
   METHOD mergeCharFormat
   METHOD blockFormat
   METHOD setBlockFormat
   METHOD mergeBlockFormat
   METHOD blockCharFormat
   METHOD setBlockCharFormat
   METHOD mergeBlockCharFormat
   METHOD atBlockStart
   METHOD atBlockEnd
   METHOD atStart
   METHOD atEnd
   METHOD insertBlock
   METHOD insertList
   METHOD createList
   METHOD currentList
   METHOD insertTable
   METHOD currentTable
   METHOD insertFrame
   METHOD currentFrame
   METHOD insertFragment
   METHOD insertHtml
   METHOD insertImage
   METHOD beginEditBlock
   METHOD joinPreviousEditBlock
   METHOD endEditBlock
   METHOD isCopyOf
   METHOD blockNumber
   METHOD columnNumber
   METHOD document

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QTextCursor
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QTextCursor>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QTextCursor>
#endif

#include <QTextDocumentFragment>
#include <QTextBlock>
#include <QTextList>
#include <QTextTable>
#include <QTextDocument>

/*
QTextCursor()
*/
void QTextCursor_new1 ()
{
  QTextCursor * o = new QTextCursor ();
  _qt5xhb_returnNewObject( o, true );
}

/*
QTextCursor(QTextDocument *document)
*/
void QTextCursor_new2 ()
{
  QTextCursor * o = new QTextCursor ( PQTEXTDOCUMENT(1) );
  _qt5xhb_returnNewObject( o, true );
}

/*
QTextCursor(QTextDocumentPrivate *p, int pos)
*/

/*
QTextCursor(QTextFrame *frame)
*/
void QTextCursor_new4 ()
{
  QTextCursor * o = new QTextCursor ( PQTEXTFRAME(1) );
  _qt5xhb_returnNewObject( o, true );
}

/*
QTextCursor(const QTextBlock &block)
*/
void QTextCursor_new5 ()
{
  QTextCursor * o = new QTextCursor ( *PQTEXTBLOCK(1) );
  _qt5xhb_returnNewObject( o, true );
}

/*
QTextCursor(QTextCursorPrivate *d)
*/

/*
QTextCursor(const QTextCursor &cursor)
*/
void QTextCursor_new7 ()
{
  QTextCursor * o = new QTextCursor ( *PQTEXTCURSOR(1) );
  _qt5xhb_returnNewObject( o, true );
}

//[1]QTextCursor()
//[2]QTextCursor(QTextDocument *document)
//[3]QTextCursor(QTextDocumentPrivate *p, int pos)
//[4]QTextCursor(QTextFrame *frame)
//[5]QTextCursor(const QTextBlock &block)
//[6]QTextCursor(QTextCursorPrivate *d)
//[7]QTextCursor(const QTextCursor &cursor)

HB_FUNC_STATIC( QTEXTCURSOR_NEW )
{
  if( ISNUMPAR(0) )
  {
    QTextCursor_new1();
  }
  else if( ISNUMPAR(1) && ISQTEXTDOCUMENT(1) )
  {
    QTextCursor_new2();
  }
  else if( ISNUMPAR(1) && ISQTEXTFRAME(1) )
  {
    QTextCursor_new4();
  }
  else if( ISNUMPAR(1) && ISQTEXTBLOCK(1) )
  {
    QTextCursor_new5();
  }
  else if( ISNUMPAR(1) && ISQTEXTCURSOR(1) )
  {
    QTextCursor_new7();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

HB_FUNC_STATIC( QTEXTCURSOR_DELETE )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void swap(QTextCursor &other)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SWAP )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTCURSOR(1) )
    {
      obj->swap ( *PQTEXTCURSOR(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isNull() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ISNULL )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isNull () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setPosition(int pos, MoveMode mode = MoveAnchor)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETPOSITION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISBETWEEN(1,2) && ISNUM(1) && ISOPTNUM(2) )
    {
      obj->setPosition ( PINT(1), ISNIL(2)? (QTextCursor::MoveMode) QTextCursor::MoveAnchor : (QTextCursor::MoveMode) hb_parni(2) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int position() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_POSITION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->position () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int positionInBlock() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_POSITIONINBLOCK )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->positionInBlock () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int anchor() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ANCHOR )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->anchor () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void insertText(const QString &text)
*/
void QTextCursor_insertText1 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertText ( PQSTRING(1) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertText(const QString &text, const QTextCharFormat &format)
*/
void QTextCursor_insertText2 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertText ( PQSTRING(1), *PQTEXTCHARFORMAT(2) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

//[1]void insertText(const QString &text)
//[2]void insertText(const QString &text, const QTextCharFormat &format)

HB_FUNC_STATIC( QTEXTCURSOR_INSERTTEXT )
{
  if( ISNUMPAR(1) && ISCHAR(1) )
  {
    QTextCursor_insertText1();
  }
  else if( ISNUMPAR(2) && ISCHAR(1) && ISQTEXTCHARFORMAT(2) )
  {
    QTextCursor_insertText2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
bool movePosition(MoveOperation op, MoveMode = MoveAnchor, int n = 1)
*/
HB_FUNC_STATIC( QTEXTCURSOR_MOVEPOSITION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISBETWEEN(1,3) && ISNUM(1) && ISOPTNUM(2) && ISOPTNUM(3) )
    {
      RBOOL( obj->movePosition ( (QTextCursor::MoveOperation) hb_parni(1), ISNIL(2)? (QTextCursor::MoveMode) QTextCursor::MoveAnchor : (QTextCursor::MoveMode) hb_parni(2), OPINT(3,1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool visualNavigation() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_VISUALNAVIGATION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->visualNavigation () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setVisualNavigation(bool b)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETVISUALNAVIGATION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setVisualNavigation ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setVerticalMovementX(int x)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETVERTICALMOVEMENTX )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setVerticalMovementX ( PINT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int verticalMovementX() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_VERTICALMOVEMENTX )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->verticalMovementX () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setKeepPositionOnInsert(bool b)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETKEEPPOSITIONONINSERT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setKeepPositionOnInsert ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool keepPositionOnInsert() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_KEEPPOSITIONONINSERT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->keepPositionOnInsert () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void deleteChar()
*/
HB_FUNC_STATIC( QTEXTCURSOR_DELETECHAR )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->deleteChar ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void deletePreviousChar()
*/
HB_FUNC_STATIC( QTEXTCURSOR_DELETEPREVIOUSCHAR )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->deletePreviousChar ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void select(SelectionType selection)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SELECT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->select ( (QTextCursor::SelectionType) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool hasSelection() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_HASSELECTION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->hasSelection () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool hasComplexSelection() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_HASCOMPLEXSELECTION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->hasComplexSelection () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void removeSelectedText()
*/
HB_FUNC_STATIC( QTEXTCURSOR_REMOVESELECTEDTEXT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->removeSelectedText ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void clearSelection()
*/
HB_FUNC_STATIC( QTEXTCURSOR_CLEARSELECTION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->clearSelection ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int selectionStart() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_SELECTIONSTART )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->selectionStart () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int selectionEnd() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_SELECTIONEND )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->selectionEnd () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QString selectedText() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_SELECTEDTEXT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->selectedText () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QTextDocumentFragment selection() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_SELECTION )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextDocumentFragment * ptr = new QTextDocumentFragment( obj->selection () );
      _qt5xhb_createReturnClass ( ptr, "QTEXTDOCUMENTFRAGMENT", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void selectedTableCells(int *firstRow, int *numRows, int *firstColumn, int *numColumns) const
*/
HB_FUNC_STATIC( QTEXTCURSOR_SELECTEDTABLECELLS )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(4) && ISNUM(1) && ISNUM(2) && ISNUM(3) && ISNUM(4) )
    {
      int par1;
int par2;
int par3;
int par4;
      obj->selectedTableCells ( &par1, &par2, &par3, &par4 );
      hb_storni( par1, 1 );
hb_storni( par2, 2 );
hb_storni( par3, 3 );
hb_storni( par4, 4 );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QTextBlock block() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_BLOCK )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextBlock * ptr = new QTextBlock( obj->block () );
      _qt5xhb_createReturnClass ( ptr, "QTEXTBLOCK", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QTextCharFormat charFormat() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_CHARFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextCharFormat * ptr = new QTextCharFormat( obj->charFormat () );
      _qt5xhb_createReturnClass ( ptr, "QTEXTCHARFORMAT", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setCharFormat(const QTextCharFormat &format)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETCHARFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTCHARFORMAT(1) )
    {
      obj->setCharFormat ( *PQTEXTCHARFORMAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void mergeCharFormat(const QTextCharFormat &modifier)
*/
HB_FUNC_STATIC( QTEXTCURSOR_MERGECHARFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTCHARFORMAT(1) )
    {
      obj->mergeCharFormat ( *PQTEXTCHARFORMAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QTextBlockFormat blockFormat() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_BLOCKFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextBlockFormat * ptr = new QTextBlockFormat( obj->blockFormat () );
      _qt5xhb_createReturnClass ( ptr, "QTEXTBLOCKFORMAT", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setBlockFormat(const QTextBlockFormat &format)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETBLOCKFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTBLOCKFORMAT(1) )
    {
      obj->setBlockFormat ( *PQTEXTBLOCKFORMAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void mergeBlockFormat(const QTextBlockFormat &modifier)
*/
HB_FUNC_STATIC( QTEXTCURSOR_MERGEBLOCKFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTBLOCKFORMAT(1) )
    {
      obj->mergeBlockFormat ( *PQTEXTBLOCKFORMAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QTextCharFormat blockCharFormat() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_BLOCKCHARFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextCharFormat * ptr = new QTextCharFormat( obj->blockCharFormat () );
      _qt5xhb_createReturnClass ( ptr, "QTEXTCHARFORMAT", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setBlockCharFormat(const QTextCharFormat &format)
*/
HB_FUNC_STATIC( QTEXTCURSOR_SETBLOCKCHARFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTCHARFORMAT(1) )
    {
      obj->setBlockCharFormat ( *PQTEXTCHARFORMAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void mergeBlockCharFormat(const QTextCharFormat &modifier)
*/
HB_FUNC_STATIC( QTEXTCURSOR_MERGEBLOCKCHARFORMAT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTCHARFORMAT(1) )
    {
      obj->mergeBlockCharFormat ( *PQTEXTCHARFORMAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool atBlockStart() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ATBLOCKSTART )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->atBlockStart () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool atBlockEnd() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ATBLOCKEND )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->atBlockEnd () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool atStart() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ATSTART )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->atStart () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool atEnd() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ATEND )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->atEnd () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void insertBlock()
*/
void QTextCursor_insertBlock1 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertBlock ();
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertBlock(const QTextBlockFormat &format)
*/
void QTextCursor_insertBlock2 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertBlock ( *PQTEXTBLOCKFORMAT(1) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertBlock(const QTextBlockFormat &format, const QTextCharFormat &charFormat)
*/
void QTextCursor_insertBlock3 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertBlock ( *PQTEXTBLOCKFORMAT(1), *PQTEXTCHARFORMAT(2) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

//[1]void insertBlock()
//[2]void insertBlock(const QTextBlockFormat &format)
//[3]void insertBlock(const QTextBlockFormat &format, const QTextCharFormat &charFormat)

HB_FUNC_STATIC( QTEXTCURSOR_INSERTBLOCK )
{
  if( ISNUMPAR(0) )
  {
    QTextCursor_insertBlock1();
  }
  else if( ISNUMPAR(1) && ISQTEXTBLOCKFORMAT(1) )
  {
    QTextCursor_insertBlock2();
  }
  else if( ISNUMPAR(2) && ISQTEXTBLOCKFORMAT(1) && ISQTEXTCHARFORMAT(2) )
  {
    QTextCursor_insertBlock3();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QTextList *insertList(const QTextListFormat &format)
*/
void QTextCursor_insertList1 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      QTextList * ptr = obj->insertList ( *PQTEXTLISTFORMAT(1) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTLIST" );
  }
}

/*
QTextList *insertList(QTextListFormat::Style style)
*/
void QTextCursor_insertList2 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      QTextList * ptr = obj->insertList ( (QTextListFormat::Style) hb_parni(1) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTLIST" );
  }
}

//[1]QTextList *insertList(const QTextListFormat &format)
//[2]QTextList *insertList(QTextListFormat::Style style)

HB_FUNC_STATIC( QTEXTCURSOR_INSERTLIST )
{
  if( ISNUMPAR(1) && ISQTEXTLISTFORMAT(1) )
  {
    QTextCursor_insertList1();
  }
  else if( ISNUMPAR(1) && ISNUM(1) )
  {
    QTextCursor_insertList2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QTextList *createList(const QTextListFormat &format)
*/
void QTextCursor_createList1 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      QTextList * ptr = obj->createList ( *PQTEXTLISTFORMAT(1) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTLIST" );
  }
}

/*
QTextList *createList(QTextListFormat::Style style)
*/
void QTextCursor_createList2 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      QTextList * ptr = obj->createList ( (QTextListFormat::Style) hb_parni(1) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTLIST" );
  }
}

//[1]QTextList *createList(const QTextListFormat &format)
//[2]QTextList *createList(QTextListFormat::Style style)

HB_FUNC_STATIC( QTEXTCURSOR_CREATELIST )
{
  if( ISNUMPAR(1) && ISQTEXTLISTFORMAT(1) )
  {
    QTextCursor_createList1();
  }
  else if( ISNUMPAR(1) && ISNUM(1) )
  {
    QTextCursor_createList2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QTextList *currentList() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_CURRENTLIST )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextList * ptr = obj->currentList ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTLIST" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QTextTable *insertTable(int rows, int cols, const QTextTableFormat &format)
*/
void QTextCursor_insertTable1 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      QTextTable * ptr = obj->insertTable ( PINT(1), PINT(2), *PQTEXTTABLEFORMAT(3) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTTABLE" );
  }
}

/*
QTextTable *insertTable(int rows, int cols)
*/
void QTextCursor_insertTable2 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      QTextTable * ptr = obj->insertTable ( PINT(1), PINT(2) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTTABLE" );
  }
}

//[1]QTextTable *insertTable(int rows, int cols, const QTextTableFormat &format)
//[2]QTextTable *insertTable(int rows, int cols)

HB_FUNC_STATIC( QTEXTCURSOR_INSERTTABLE )
{
  if( ISNUMPAR(3) && ISNUM(1) && ISNUM(2) && ISQTEXTTABLEFORMAT(3) )
  {
    QTextCursor_insertTable1();
  }
  else if( ISNUMPAR(2) && ISNUM(1) && ISNUM(2) )
  {
    QTextCursor_insertTable2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QTextTable *currentTable() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_CURRENTTABLE )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextTable * ptr = obj->currentTable ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTTABLE" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QTextFrame *insertFrame(const QTextFrameFormat &format)
*/
HB_FUNC_STATIC( QTEXTCURSOR_INSERTFRAME )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTFRAMEFORMAT(1) )
    {
      QTextFrame * ptr = obj->insertFrame ( *PQTEXTFRAMEFORMAT(1) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTFRAME" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QTextFrame *currentFrame() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_CURRENTFRAME )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextFrame * ptr = obj->currentFrame ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTFRAME" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void insertFragment(const QTextDocumentFragment &fragment)
*/
HB_FUNC_STATIC( QTEXTCURSOR_INSERTFRAGMENT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTDOCUMENTFRAGMENT(1) )
    {
      obj->insertFragment ( *PQTEXTDOCUMENTFRAGMENT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertHtml(const QString &html)
*/
HB_FUNC_STATIC( QTEXTCURSOR_INSERTHTML )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->insertHtml ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertImage(const QTextImageFormat &format, QTextFrameFormat::Position alignment)
*/
void QTextCursor_insertImage1 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertImage ( *PQTEXTIMAGEFORMAT(1), (QTextFrameFormat::Position) hb_parni(2) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertImage(const QTextImageFormat &format)
*/
void QTextCursor_insertImage2 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertImage ( *PQTEXTIMAGEFORMAT(1) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertImage(const QString &name)
*/
void QTextCursor_insertImage3 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertImage ( PQSTRING(1) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertImage(const QImage &image, const QString &name = QString())
*/
void QTextCursor_insertImage4 ()
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      obj->insertImage ( *PQIMAGE(1), OPQSTRING(2,QString()) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

//[1]void insertImage(const QTextImageFormat &format, QTextFrameFormat::Position alignment)
//[2]void insertImage(const QTextImageFormat &format)
//[3]void insertImage(const QString &name)
//[4]void insertImage(const QImage &image, const QString &name = QString())

HB_FUNC_STATIC( QTEXTCURSOR_INSERTIMAGE )
{
  if( ISNUMPAR(2) && ISQTEXTIMAGEFORMAT(1) && ISNUM(2) )
  {
    QTextCursor_insertImage1();
  }
  else if( ISNUMPAR(1) && ISQTEXTIMAGEFORMAT(1) )
  {
    QTextCursor_insertImage2();
  }
  else if( ISNUMPAR(1) && ISCHAR(1) )
  {
    QTextCursor_insertImage3();
  }
  else if( ISBETWEEN(1,2) && ISQIMAGE(1) && ISOPTCHAR(2) )
  {
    QTextCursor_insertImage4();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
void beginEditBlock()
*/
HB_FUNC_STATIC( QTEXTCURSOR_BEGINEDITBLOCK )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->beginEditBlock ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void joinPreviousEditBlock()
*/
HB_FUNC_STATIC( QTEXTCURSOR_JOINPREVIOUSEDITBLOCK )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->joinPreviousEditBlock ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void endEditBlock()
*/
HB_FUNC_STATIC( QTEXTCURSOR_ENDEDITBLOCK )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->endEditBlock ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isCopyOf(const QTextCursor &other) const
*/
HB_FUNC_STATIC( QTEXTCURSOR_ISCOPYOF )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQTEXTCURSOR(1) )
    {
      RBOOL( obj->isCopyOf ( *PQTEXTCURSOR(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int blockNumber() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_BLOCKNUMBER )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->blockNumber () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int columnNumber() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_COLUMNNUMBER )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->columnNumber () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QTextDocument *document() const
*/
HB_FUNC_STATIC( QTEXTCURSOR_DOCUMENT )
{
  QTextCursor * obj = (QTextCursor *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QTextDocument * ptr = obj->document ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QTEXTDOCUMENT" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

HB_FUNC_STATIC( QTEXTCURSOR_NEWFROM )
{
  PHB_ITEM self = hb_stackSelfItem();

  if( hb_pcount() == 1 && ISOBJECT(1) )
  {
    PHB_ITEM ptr = hb_itemPutPtr( NULL, (void *) hb_itemGetPtr( hb_objSendMsg( hb_param(1, HB_IT_OBJECT ), "POINTER", 0 ) ) );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
    PHB_ITEM des = hb_itemPutL( NULL, false );
    hb_objSendMsg( self, "_self_destruction", 1, des );
    hb_itemRelease( des );
  }
  else if( hb_pcount() == 1 && ISPOINTER(1) )
  {
    PHB_ITEM ptr = hb_itemPutPtr( NULL, (void *) hb_itemGetPtr( hb_param(1, HB_IT_POINTER ) ) );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
    PHB_ITEM des = hb_itemPutL( NULL, false );
    hb_objSendMsg( self, "_self_destruction", 1, des );
    hb_itemRelease( des );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }

  hb_itemReturn( self );
}

HB_FUNC_STATIC( QTEXTCURSOR_NEWFROMOBJECT )
{
  HB_FUNC_EXEC( QTEXTCURSOR_NEWFROM );
}

HB_FUNC_STATIC( QTEXTCURSOR_NEWFROMPOINTER )
{
  HB_FUNC_EXEC( QTEXTCURSOR_NEWFROM );
}

HB_FUNC_STATIC( QTEXTCURSOR_SELFDESTRUCTION )
{
  hb_retl( (bool) hb_itemGetL( hb_objSendMsg( hb_stackSelfItem(), "SELF_DESTRUCTION", 0 ) ) );
}

HB_FUNC_STATIC( QTEXTCURSOR_SETSELFDESTRUCTION )
{
  PHB_ITEM self = hb_stackSelfItem();

  if( hb_pcount() == 1 && ISLOG(1) )
  {
    PHB_ITEM des = hb_itemPutL( NULL, hb_parl(1) );
    hb_objSendMsg( self, "_self_destruction", 1, des );
    hb_itemRelease( des );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }

  hb_itemReturn( self );
}

#pragma ENDDUMP

/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2020 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QVirtualKeyboardSelectionListModel INHERIT QAbstractListModel

   METHOD delete

   METHOD onCountChanged
   METHOD onActiveItemChanged
   METHOD onItemSelected

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QVirtualKeyboardSelectionListModel
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtVirtualKeyboard/QVirtualKeyboardSelectionListModel>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"
#include "qt5xhb_events.h"
#include "qt5xhb_signals.h"

#ifdef __XHARBOUR__
#include <QtVirtualKeyboard/QVirtualKeyboardSelectionListModel>
#endif

/*
explicit QVirtualKeyboardSelectionListModel(QObject *parent = nullptr)
*/

/*
~QVirtualKeyboardSelectionListModel()
*/
HB_FUNC_STATIC( QVIRTUALKEYBOARDSELECTIONLISTMODEL_DELETE )
{
  QVirtualKeyboardSelectionListModel * obj = (QVirtualKeyboardSelectionListModel *) Qt5xHb::itemGetPtrStackSelfItem();

  if( obj )
  {
    Qt5xHb::Events_disconnect_all_events( obj, true );
    Qt5xHb::Signals_disconnect_all_signals( obj, true );
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int count() const
*/

/*
void setDataSource(QVirtualKeyboardAbstractInputMethod *dataSource, Type type)
*/
/*
QVirtualKeyboardAbstractInputMethod *dataSource() const
*/
/*
int rowCount(const QModelIndex &parent = QModelIndex()) const
*/
/*
QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const
*/
/*
QHash<int,QByteArray> roleNames() const
*/
/*
Q_INVOKABLE void selectItem(int index)
*/
/*
Q_INVOKABLE void removeItem(int index)
*/
/*
Q_INVOKABLE QVariant dataAt(int index, Role role = Role::Display) const
*/

void QVirtualKeyboardSelectionListModelSlots_connect_signal( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QVIRTUALKEYBOARDSELECTIONLISTMODEL_ONCOUNTCHANGED )
{
  QVirtualKeyboardSelectionListModelSlots_connect_signal( "countChanged()", "countChanged()" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDSELECTIONLISTMODEL_ONACTIVEITEMCHANGED )
{
  QVirtualKeyboardSelectionListModelSlots_connect_signal( "activeItemChanged(int)", "activeItemChanged(int)" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDSELECTIONLISTMODEL_ONITEMSELECTED )
{
  QVirtualKeyboardSelectionListModelSlots_connect_signal( "itemSelected(int)", "itemSelected(int)" );
}

#pragma ENDDUMP
